name: object

.VS: &VS |
  #version 330 core
  // All calculations are in world space.

  layout(location = 0) in vec3 IN_position;
  layout(location = 1) in vec3 IN_normal;
  layout(location = 2) in vec4 IN_color;
  layout(location = 3) in vec2 IN_uv;

  out InOut {
    vec3 wpos;
    vec3 wnrm;
    vec2 uv;
    vec3 weye; // vector from vertex to camera
    vec4 shadow_coord;
    vec4 cspos; // for fog
    float fog;  // fog visibility, 0 - no fog, 1 - 100% fog
  } OUT;

  uniform mat4 SU_PVM_MATRIX;
  uniform mat4 SU_M_MATRIX;
  uniform mat4 SU_V_MATRIX;
  uniform mat4 depth_bias_pvm;  // bias * p * v * m of the shadowmap camera (bias = *.5 +.5)
  
  // fog = e^-(distance * density)^gradient
  const float fog_density = 0.015; // less density => less fog
  const float fog_gradient = 2.5;   // how smooth the transition, more gradient => sharper the transition

  void main() {
    OUT.wpos = (SU_M_MATRIX * vec4(IN_position, 1)).xyz;
    OUT.wnrm = normalize((SU_M_MATRIX * vec4(IN_normal.xyz, 0)).xyz);
    vec4 wcam = inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1);
    OUT.weye = wcam.xyz - OUT.wpos; // to camera vector, no need to normalize just yet
    OUT.uv = IN_uv;
    OUT.shadow_coord = depth_bias_pvm * vec4(OUT.wpos, 1);
    
    float distance = length(wcam.xyz - OUT.wpos);
    OUT.fog = exp(-pow((distance * fog_density), fog_gradient));
    OUT.fog = clamp(OUT.fog, 0, 1);
    OUT.cspos = SU_PVM_MATRIX * vec4(IN_position, 1); 

    gl_Position = OUT.cspos; 
  }

.FS: &FS |
  #version 330 core

  in InOut {
    vec3 wpos;
    vec3 wnrm;
    vec2 uv;
    vec3 weye;
    vec4 shadow_coord; // x,y - fragment position on shadowmap, z - depth on shadowmap on (x,y), w - ? 
    vec4 cspos;
    float fog;
  } IN;
  
  out vec4 OUT_color;

  struct Material {
    vec4  diffuse;
    vec4  ambient;
    vec4  specular;
    float shininess;
  };

  #define HW_PFC

  uniform sampler2DShadow TEXTURE_0; // shadow map
  uniform sampler2D       TEXTURE_1; // atmosphere map

  uniform Material surface;
  uniform vec3 SU_DIRECTIONAL_LIGHT_DIRECTION_0;
  uniform vec4 SU_DIRECTIONAL_LIGHT_COLOR_0;

  ///////////////////////////////////////////////////////////////////////////
  // n          - unit normal
  // e          - unit point to camera
  // l          - unit point to light source
  // lc         - light source color
  // suface     - surface properties
  // kd_texture - sampled texture color
  // shadow     - shadow visibility: 0 - full shadow, 1 - no shadow
  ///////////////////////////////////////////////////////////////////////////
  vec3 Shading(vec3 n, vec3 e, vec3 l, vec3 lc, Material surface, vec4 kd_texture, float shadow) {
    vec3 spec = vec3(0);

    float diff_int = max(dot(n, l), 0); 
    if (diff_int > 0) {
      // the half vector
      vec3 h = normalize(l + e);
      float spec_int = max(dot(n, h), 0);
      spec = surface.specular.rgb * pow(spec_int, surface.shininess);
    }

    vec3 diff = shadow * diff_int * surface.diffuse.rgb * kd_texture.rgb;          
    vec3 light = (diff + spec) * lc; 
    //return max(light, surface.ambient.rgb);
    return light  + surface.ambient.rgb;
  }
  
  // Converts clip space position to UV coordinates
  vec2 ClipSpaceToUV(vec4 cspos) {
    vec2 ndc = cspos.xy / cspos.w; // normal device coords, 0,0 - center, 1,1 - right/top
    return ndc / 2.0 + 0.5;
  }

  void main () {
    // normal, to eye and to light unit vectors in world space
    vec3 n = normalize(IN.wnrm);
    vec3 e = normalize(IN.weye);
    vec3 l = -normalize(SU_DIRECTIONAL_LIGHT_DIRECTION_0);
    vec3 lc = SU_DIRECTIONAL_LIGHT_COLOR_0.rgb;

    const float shadow_bias = 0.001;
    
    float shadowmap_pcf = texture( TEXTURE_0, vec3(IN.shadow_coord.xy, (IN.shadow_coord.z - shadow_bias)/IN.shadow_coord.w) );
    float shadow = 1 - 0.35 * (1 - shadowmap_pcf); // 0 - no shadow, 1 - full shadow

    OUT_color.rgb = Shading(n, e, l, lc, surface, vec4(1,1,1,1), shadow);
    
    vec4 fog_color = vec4(texture(TEXTURE_1, ClipSpaceToUV(IN.cspos)).rgb, 1);
    OUT_color = mix(fog_color, OUT_color, IN.fog);
    OUT_color.a = 1;
  }

pass:
  name     : pass.normal 
  tags     : [onscreen]
  queue    : 110
  cull     : ccw 
  vertex   : *VS
  fragment : *FS 

pass:
  name     : pass.shadowcast
  tags     : [shadow-caster]
  queue    : 100
  cull     : cw
  vertex   : Assets/Shaders/shadowmap_caster.vs
  fragment : Assets/Shaders/shadowmap_caster.fs
