name: terrain 

pass:
  name: terrain 
  queue: 100
  tags: [onscreen]
  cull: ccw 
  vertex: | 
          #version 330 core

          // Input must follow the layout
          layout(location = 0) in vec3 In_position;
          layout(location = 1) in vec3 In_normal;
          layout(location = 2) in vec4 In_color;

          out InOut {
            vec4 cspos;
            vec3 wpos;
            vec3 wnormal;
            vec3 vcol;
            float fog;    // fog visibility, 0 - no fog, 1 - 100% fog
          } Out;

          uniform mat4 SU_PVM_MATRIX;
          uniform mat4 SU_M_MATRIX;
          uniform mat4 SU_V_MATRIX;
         
          // fog = e^-(distance * density)^gradient
          const float fog_density = 0.0002; // less density => less fog
          const float fog_gradient = 2.5;   // how smooth the transition, more gradient => sharper the transition

          void main() {
            Out.wpos = (SU_M_MATRIX * vec4(In_position, 1)).xyz;
            Out.wnormal = mat3(SU_M_MATRIX) * In_normal;
            Out.vcol = In_color.rgb;

            vec3 wcam = (inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1)).xyz;
            Out.cspos = SU_PVM_MATRIX * vec4(In_position, 1); 

            float distance = length(wcam - Out.wpos);
            Out.fog = exp(-pow((distance * fog_density), fog_gradient));
            Out.fog = clamp(Out.fog, 0, 1);

            gl_Position = Out.cspos; 
          }

  fragment: | 
          #version 330 core

          in InOut {
            vec4 cspos;
            vec3 wpos;
            vec3 wnormal;
            vec3 vcol;
            float fog;    // fog visibility, 0 - no fog, 1 - 100% fog
          } In;

          out vec4 Out_color;

          uniform vec3 SU_DIRECTIONAL_LIGHT_DIRECTION_0;
          uniform vec4 SU_DIRECTIONAL_LIGHT_COLOR_0;
          uniform sampler2D TEXTURE_0; // atmosphere

          // Converts clip space position to UV coordinates
          vec2 ClipSpaceToUV(vec4 cspos) {
            vec2 ndc = cspos.xy / cspos.w; // normal device coords, 0,0 - center, 1,1 - right/top
            return ndc / 2.0 + 0.5;
          }

          void main () {
            vec4 fog_color = vec4(texture(TEXTURE_0, ClipSpaceToUV(In.cspos)).rgb, 1);

            vec3 N = normalize(In.wnormal);
            vec3 L = normalize(-SU_DIRECTIONAL_LIGHT_DIRECTION_0);
            vec3 ambient = vec3(.3, .2, .2);

            float df = max(0, dot(N, L));
            vec3 tint = vec3(1); 
            vec4 shading = vec4(df * In.vcol * tint  + ambient, 1);
            Out_color = mix(fog_color, shading, In.fog);
            Out_color.a = 1;
          }

