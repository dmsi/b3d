name: tesselation

.VS: &VS | 
  #version 400 core

  layout(location = 0) in vec3 In_Position;

  out InOut {
    vec3 vpos;
  } Out;

  void main() {
    Out.vpos = In_Position;
  }

.TC: &TC |
  #version 400 core

  layout(vertices = 16) out;

  in InOut {
    vec3 vpos;
  } In[];

  out InOut {
    vec3 vpos;
  } Out[];

  const float TessLevelInner = 1;
  const float TessLevelOuter = 1;

  #define ID gl_InvocationID

  void main() {
    Out[ID].vpos = In[ID].vpos;
    if (ID == 0) {
      gl_TessLevelInner[0] = TessLevelInner;
      gl_TessLevelInner[1] = TessLevelInner;

      gl_TessLevelOuter[0] = TessLevelOuter;
      gl_TessLevelOuter[1] = TessLevelOuter;
      gl_TessLevelOuter[2] = TessLevelOuter;
      gl_TessLevelOuter[3] = TessLevelOuter;
    }
  }

.TE: &TE |
  #version 400 core
  #line 50

  //layout(quads, equal_spacing, ccw) in;
  layout(quads) in;
  
  in InOut {
    vec3 vpos;
  } In[];

  out InOut {
    vec3 vpos;
    vec4 patch_distance;
  } Out;

  uniform mat4 SU_PVM_MATRIX;

  void main() {
    float u = gl_TessCoord.y;
    float v = gl_TessCoord.x;
    vec3 a = mix(In[0].vpos, In[3].vpos, u);
    vec3 b = mix(In[12].vpos, In[15].vpos, u);
    Out.vpos = mix(a, b, v);
    Out.patch_distance = vec4(u, v, 1-u, 1-v);
    gl_Position = SU_PVM_MATRIX * vec4(Out.vpos, 1);
    /*
    vec3 p0 = gl_TessCoord.x * In[0].vpos;
    vec3 p1 = gl_TessCoord.y * In[1].vpos;
    vec3 p2 = gl_TessCoord.z * In[2].vpos;
    Out.vpos = normalize(p0 + p1 + p2);
    Out.patch_distance = gl_TessCoord;
    gl_Position = SU_PVM_MATRIX * vec4(Out.vpos, 1);
    */
  }

.GS: &GS |
  #version 400 core

  layout(triangles) in;
  layout(triangle_strip, max_vertices = 3) out;

  in InOut {
    vec3 vpos;
    vec4 patch_distance;
  } In[3];

  out InOut {
    vec3 wnormal;
    vec4 patch_distance;
    vec3 tri_distance;
  } Out;

  uniform mat4 SU_M_MATRIX;

  void main() {
    vec3 A = In[2].vpos - In[0].vpos;
    vec3 B = In[1].vpos - In[0].vpos;
    Out.wnormal = mat3(SU_M_MATRIX) * normalize(cross(A, B));

    Out.patch_distance = In[0].patch_distance;
    Out.tri_distance = vec3(1, 0, 0);
    gl_Position = gl_in[0].gl_Position; EmitVertex();

    Out.patch_distance = In[1].patch_distance;
    Out.tri_distance = vec3(0, 1, 0);
    gl_Position = gl_in[1].gl_Position; EmitVertex();

    Out.patch_distance = In[2].patch_distance;
    Out.tri_distance = vec3(0, 0, 1);
    gl_Position = gl_in[2].gl_Position; EmitVertex();

    EndPrimitive();
  }


.FS: &FS | 
  #version 400 core

  in InOut {
    vec3 wnormal;
    vec4 patch_distance;
    vec3 tri_distance;
  } In;

  out vec4 Out_color;
  
  void main() {
    Out_color  = vec4(0);
  }

pass:
  name             : pass.normal
  queue            : 110
  tags             : [onscreen]
  cull             : ccw
  vertex           : *VS
  tess_control     : *TC
  tess_evaluation  : *TE
  geometry         : *GS
  fragment         : *FS

