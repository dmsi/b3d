name: terrain_atmosphere.mat

.VS: &VS |
  #version 330 core

  layout(location = 0) in vec3 IN_position;
  layout(location = 1) in vec3 IN_normal;
  layout(location = 2) in vec4 IN_color;

  out InOut {
    vec4 cspos;
    vec3 wpos;    // positing in world space
    vec3 wnrm;
    vec3 vcol;    // vertex color
    float fog;    // fog visibility, 0 - no fog, 1 - 100% fog
  } OUT;

  uniform mat4 SU_PVM_MATRIX;
  uniform mat4 SU_V_MATRIX;
  uniform mat4 SU_M_MATRIX;

  // fog = e^-(distance * density)^gradient
  const float fog_density = 0.0009; // less density => less fog
  const float fog_gradient = 2.5;   // how smooth the transition, more gradient => sharper the transition

  void main() {
    vec3 wcam = (inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1)).xyz;
    OUT.cspos = SU_PVM_MATRIX * vec4(IN_position, 1);
    OUT.wpos = (SU_M_MATRIX * vec4(IN_position, 1)).xyz;
    OUT.wnrm = (SU_M_MATRIX * vec4(IN_normal, 1)).xyz;
    OUT.vcol = IN_color.rgb / 1.0; // invert colors for fun!

    float distance = length(wcam - OUT.wpos);
    OUT.fog = exp(-pow((distance * fog_density), fog_gradient));
    OUT.fog = clamp(OUT.fog, 0, 1);

    gl_Position = SU_PVM_MATRIX * vec4(IN_position, 1);
  }

.GS: &GS |
  #version 330 core

  layout (triangles) in;
  layout (triangle_strip, max_vertices=3) out;

  in InOut {
    vec4 cspos;
    vec3 wpos;
    vec3 wnrm;
    vec3 vcol;
    float fog;
  } IN[3];

  out InOut {
    vec4 cspos;
    vec3 wpos;
    vec3 wnrm; // world space normal - same for all 3 vertex in triangle, the whole idea of flat shading
    vec3 vcol; // color - same for all 3 vertex in triangle (in fact the same for whole quad)
    float fog;
  } OUT;


  void main() {
    vec3 col = IN[0].vcol;

    vec3 normal = normalize( cross(IN[1].wpos - IN[0].wpos,
                                   IN[2].wpos - IN[0].wpos) );

    for (int i = 0; i < gl_in.length(); i++) {
      gl_Position        = gl_in[i].gl_Position;
      OUT.cspos          = IN[i].cspos;
      OUT.wnrm           = normal;
      OUT.vcol           = col;
      OUT.fog            = IN[i].fog;
      EmitVertex();
    }
    EndPrimitive();
  }

.FS: &FS |
  #version 330 core

  in InOut {
    vec4 cspos;
    vec3 wpos;
    vec3 wnrm;
    vec3 vcol;
    float fog;
  } IN;

  out vec4 OUT_color;

  uniform vec3      SU_DIRECTIONAL_LIGHT_DIRECTION_0;
  uniform vec4      SU_DIRECTIONAL_LIGHT_COLOR_0;
  uniform sampler2D TEXTURE_0; // atmosphere

  const vec3 ambient = vec3(.1, .1, .1);

  // Converts clip space position to UV coordinates
  vec2 ClipSpaceToUV(vec4 cspos) {
    vec2 ndc = cspos.xy / cspos.w; // normal device coords, 0,0 - center, 1,1 - right/top
    return ndc / 2.0 + 0.5;
  }

  void main () {
    vec3 to_sun = -normalize(SU_DIRECTIONAL_LIGHT_DIRECTION_0);
    vec3 normal = normalize(IN.wnrm);
    vec4 fog_color = vec4(texture(TEXTURE_0, ClipSpaceToUV(IN.cspos)).rgb, 1);
    vec3 sun_col = SU_DIRECTIONAL_LIGHT_COLOR_0.rgb * fog_color.rgb;
    vec3 diffuse = max(dot(normal, to_sun), 0) * sun_col;
    OUT_color.rgb = diffuse * IN.vcol + ambient;
    OUT_color = mix(fog_color, OUT_color, IN.fog);
    OUT_color.a = 1;
  }

pass:
  name       : pass0
  tags       : [onscreen]
  queue      : 100
  cull       : ccw
  vertex     : *VS
  geometry   : *GS
  fragment   : *FS
