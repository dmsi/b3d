name: gauss_blur 

pass:
  name   : pass0 
  tags   : [onscreen]
  queue  : 1000
  ztest  : off
  cull   : ccw 
  vertex: | 
          #version 330 core

          layout(location = 0) in vec3 IN_position;
          layout(location = 3) in vec2 IN_uv;

          out VertexData {
            vec2 uv[11]; // 11x11-ish kernel
          } OUT;

          uniform mat4 SU_M_MATRIX;
          uniform int uv_flip_horiz = 0;
          uniform int uv_flip_vert = 0;
          uniform int target_width = 1280;
          uniform int target_height = 720;
          uniform vec2 direction = vec2(0, 1);

          void main() {
            vec4 wpos = SU_M_MATRIX * vec4(IN_position, 1);
            gl_Position = wpos;
            OUT.uv[5] = IN_uv;

            if (uv_flip_horiz > 0) {
              OUT.uv[5].x = 1 - OUT.uv[5].x;
            }

            if (uv_flip_vert > 0) {
              OUT.uv[5].y = 1 - OUT.uv[5].y;
            }

            vec2 uv_step = vec2(1.0/target_width, 1.0/target_height) * direction;

            for (int i=-5; i<=5; i++) {
              if (i != 0) {
                OUT.uv[i+5] = OUT.uv[5] + uv_step * i;
              }
            }
          }

  fragment: | 
          #version 330 core

          in VertexData {
            vec2 uv[11]; // 11x11 kernel
          } IN;
          
          out vec4 OUT_color;

          uniform sampler2D TEXTURE_0; 

          const float gauss_kernel[11] = float[11](
            0.0093,
            0.028002,
            0.065984,
            0.121703,
            0.175713,
            0.198596,
            0.175713,
            0.121703,
            0.065984,
            0.028002,
            0.0093
          ); 

          void main () {
            vec4 sum = vec4(0, 0, 0, 0);
            for (int i=-5; i<=5; i++){
              sum += texture(TEXTURE_0, IN.uv[i+5]) * gauss_kernel[i+5];
            }
            OUT_color = vec4(sum.rgb, 1);
          }
