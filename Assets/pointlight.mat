name: point_light

textures: 
  0: Assets/tango-128.ppm

pass:
  name    : pass0
  queue   : 100
  tags    : [onscreen]
  cull    : ccw

  vertex: | 
          #version 330 core

          layout(location = 0) in vec3 IN_position;
          layout(location = 1) in vec3 IN_normal;
          layout(location = 3) in vec2 IN_uv;

          out InOut {
            vec3 wpos;
            vec3 wnrm;
            vec2 uv;
          } OUT;

          uniform mat4 SU_PVM_MATRIX; //SU_pvm_matrix? ->IN, OUT, SU (Standard or System Uniform)
          uniform mat4 SU_M_MATRIX;


          void main() {
            OUT.wnrm = normalize(SU_M_MATRIX * vec4(IN_normal, 0)).xyz;
            OUT.wpos = (SU_M_MATRIX * vec4(IN_position, 1)).xyz;
            OUT.uv = IN_uv;
            gl_Position = SU_PVM_MATRIX * vec4(IN_position, 1); 
          }

  fragment: | 
          #version 330 core

          in InOut {
            vec3 wpos;
            vec3 wnrm;
            vec2 uv;
          } IN;

          out vec4 OUT_color;

          struct PtLight {
            vec3 position;
            vec3 attenuation; // x + y*d + z*d*d, d - distance
            vec4 color;
          };

          uniform sampler2D TEXTURE_0; // SU_texture_0?

          uniform PtLight light = PtLight (
              vec3(0, 0, 0),
              vec3(0, .6, 0),
              vec4(1, 1, 1, 1)
          );

          void main () {
            vec2 uv = vec2(IN.uv.x, 1-IN.uv.y);
            vec4 tex = texture(TEXTURE_0, uv);
            vec3 n = normalize(IN.wnrm);
            float d = length(light.position - IN.wpos);
            vec3 l = normalize(light.position - IN.wpos);
            float att = dot(vec3(light.attenuation), vec3(1, d, d*d));
            float diffuse = max(dot(n, l), 0) / att;
            //OUT_color = vec4(abs(n.xyz)/2, 1) * diffuse;
            vec4 tint = vec4(.8, .4, .4, 1);
            OUT_color = vec4(vec3(diffuse), 1) * tint;
          }

