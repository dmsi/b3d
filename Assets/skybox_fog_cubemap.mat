name: skybox_cubemap 

textures:
  0: 
    - Assets/3rdParty/sky_cubemap/right.ppm
    - Assets/3rdParty/sky_cubemap/left.ppm
    - Assets/3rdParty/sky_cubemap/top.ppm
    - Assets/3rdParty/sky_cubemap/bottom.ppm
    - Assets/3rdParty/sky_cubemap/back.ppm
    - Assets/3rdParty/sky_cubemap/front.ppm


pass:
  name   : pass0 
  cull   : cw 
  queue  : 10
  tags   : [onscreen]
  zwrite : off
  ztest  : on

  vertex : | 
          #version 330 core

          layout(location = 0) in vec3 IN_position;

          out VertexData {
            vec3 cube_uv;
          } OUT;

          uniform mat4 SU_V_MATRIX;
          uniform mat4 SU_P_MATRIX;

          void main() {
            // Remove translation from the view matrix
            mat4 view = SU_V_MATRIX; 
            view[3][0] = 0;
            view[3][1] = 0;
            view[3][2] = 0;
            mat4 pvm = SU_P_MATRIX * view;
            vec3 p = IN_position * 10; // prevent from projection clipping
            OUT.cube_uv = IN_position; 
            gl_Position = (pvm * vec4(p, 1));
          }

  fragment: | 
          #version 330 core

          in VertexData {
            vec3 cube_uv;
          } IN;
          
          out vec4 OUT_color;
          
          uniform vec3 SU_DIRECTIONAL_LIGHT_DIRECTION_0;
          uniform vec4 SU_DIRECTIONAL_LIGHT_COLOR_0;

          uniform vec4 fog_color = vec4(.4, .4, .4, 1);
          uniform float fog_lower_limit = 0;
          uniform float fog_upper_limit = 2;

          uniform samplerCube TEXTURE_0;

          void main () {
            float fog = (IN.cube_uv.y - fog_lower_limit) / (fog_upper_limit - fog_lower_limit);
            fog = clamp(fog, 0, 1);
            OUT_color = texture(TEXTURE_0, IN.cube_uv);
            OUT_color = mix(fog_color, OUT_color, fog);
            OUT_color.a = 1;
          }
