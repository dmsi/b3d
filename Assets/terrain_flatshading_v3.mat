name: terrain_flatshading.mat 

pass:
  name: terrain_flatshading.mat/Pass 
  queue: 100
  tags: [onscreen]
  cull: ccw 
  vertex: | 
          #version 330 core

          // Input must follow the layout
          layout(location = 0) in vec3 vertex_position;
          layout(location = 1) in vec3 vertex_normal;
          layout(location = 2) in vec4 vertex_color;

          out VertexData {
            vec3 wpos;
            vec3 vcol;
          } OUT;

          uniform mat4 SU_PVM_MATRIX;
          uniform mat4 SU_M_MATRIX;

          void main() {
            gl_Position = SU_PVM_MATRIX * vec4(vertex_position, 1); 
            OUT.wpos = (SU_M_MATRIX * vec4(vertex_position, 1)).xyz;
            OUT.vcol = vertex_color.rgb/ 1.5; // invert colors for fun!
          }

  geometry: |
          #version 330 core

          layout(triangles) in;
          layout (triangle_strip, max_vertices=3) out;

          in VertexData {
            vec3 wpos;
            vec3 vcol;
          } IN[3]; 

          out VertexData {
            out vec3 wpos;
            out vec3 wnormal;
            out vec3 vcol;
          } OUT; 

          void main() {
            vec3 col = IN[0].vcol;

            vec3 normal = normalize( cross(IN[1].wpos.xyz - IN[0].wpos.xyz,
                                           IN[2].wpos.xyz - IN[0].wpos.xyz) );

            for (int i = 0; i < gl_in.length(); i++) {
              gl_Position = gl_in[i].gl_Position;
              OUT.wpos     = IN[i].wpos;
              OUT.wnormal  = normal;
              OUT.vcol     = col;

              EmitVertex();
            }
            EndPrimitive();
          }

  fragment: | 
          #version 330 core

          in VertexData {
            vec3 wpos;
            vec3 wnormal;
            vec3 vcol;
          } IN;

          uniform vec3 SU_DIRECTIONAL_LIGHT_DIRECTION_0;
          uniform vec4 SU_DIRECTIONAL_LIGHT_COLOR_0;

          vec3 Lighting(vec3 normal) {
            vec3 to_light = normalize(-SU_DIRECTIONAL_LIGHT_DIRECTION_0);
            vec3 diffuse = max(0, dot(normal, to_light)) * SU_DIRECTIONAL_LIGHT_COLOR_0.rgb;
            vec3 ambient = vec3(.3, .2, .2);
            return diffuse + ambient; 
          }

          out vec3 color;
          void main () {
            color = Lighting(IN.wnormal) * IN.vcol;
          }

