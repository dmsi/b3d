# Default material file 
name: DefaultMaterial 

textures: 
  0: Assets/tango-128.ppm

pass:
  name: default.mat/Default/Pass
  cull: ccw 
  vertex: | 
          #version 330 core

          // Input must follow the layout
          layout(location = 0) in vec3 vertex_position;
          layout(location = 1) in vec3 vertex_normal;
          layout(location = 2) in vec4 vertex_color;
          layout(location = 3) in vec2 vertex_uv;

          out VertexData {
            vec3 wpos;
            vec3 wnormal;
            vec2 uv;
            vec3 vcol;
          } OUT;

          uniform mat4 SU_PVM_MATRIX;
          uniform mat4 SU_matrix_MATRIX;

          void main() {
            gl_Position = SU_PVM_MATRIX * vec4(vertex_position, 1); 
            OUT.uv = vertex_uv;
            OUT.wpos = (SU_M_MATRIX * vec4(vertex_position, 1)).xyz;
            OUT.wnormal = normalize((SU_M_MATRIX * vec4(vertex_normal.xyz, 0)).xyz);
            OUT.vcol = vertex_color.rgb;
          }

  fragment: | 
          #version 330 core

          in VertexData {
            vec3 wpos;
            vec3 wnormal;
            vec2 uv;
            vec3 vcol;
          } IN;

          uniform sampler2D TEXTURE_0;
          
          uniform vec3 SU_DIRECTIONAL_LIGHT_DIRECTION_0;
          uniform vec4 SU_DIRECTIONAL_LIGHT_COLOR_0;

          vec3 Lighting(vec3 normal) {
            vec3 worldSpaceLightPos = SU_DIRECTIONAL_LIGHT_DIRECTION_0;
            vec3 light0 = normalize( worldSpaceLightPos );
            vec3 diffuse = max(0, dot(normal, light0)) * SU_DIRECTIONAL_LIGHT_COLOR_0.rgb;
            vec3 ambient = vec3(0, 0, 0);
            return diffuse + ambient; 
          }

          out vec3 color;
          void main () {
            vec3 ambient = vec3(.2, .1, .1);
            vec3 c0 = texture(TEXTURE_0, IN.uv).rgb;
            color = (Lighting(IN.wnormal) + ambient) * c0;
          }

