name: shadow_caster_receiver_dirlight

.VS: &VS |
  #version 330 core
  // All calculations are in world space.

  layout(location = 0) in vec3 IN_position;
  layout(location = 1) in vec3 IN_normal;
  layout(location = 2) in vec4 IN_color;
  layout(location = 3) in vec2 IN_uv;

  out InOut {
    vec3 wpos;
    vec3 wnrm;
    vec2 uv;
    vec3 weye; // vector from vertex to camera
    vec4 shadow_coord;
  } OUT;

  uniform mat4 SU_PVM_MATRIX;
  uniform mat4 SU_M_MATRIX;
  uniform mat4 SU_V_MATRIX;
  uniform mat4 depth_bias_pvm;  // bias * p * v * m of the shadowmap camera (bias = *.5 +.5)

  void main() {
    OUT.wpos = (SU_M_MATRIX * vec4(IN_position, 1)).xyz;
    OUT.wnrm = normalize((SU_M_MATRIX * vec4(IN_normal.xyz, 0)).xyz);
    vec4 campos = inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1);
    OUT.weye = campos.xyz - OUT.wpos; // to camera vector, no need to normalize just yet
    OUT.uv = IN_uv;
    OUT.shadow_coord = depth_bias_pvm * vec4(OUT.wpos, 1);
    gl_Position = SU_PVM_MATRIX * vec4(IN_position, 1); 
  }

.FS: &FS |
  #version 330 core

  in InOut {
    vec3 wpos;
    vec3 wnrm;
    vec2 uv;
    vec3 weye;
    vec4 shadow_coord; // x,y - fragment position on shadowmap, z - depth on shadowmap on (x,y), w - ? 
  } IN;
  
  out vec4 OUT_color;

  struct Material {
    vec4  diffuse;
    vec4  ambient;
    vec4  specular;
    float shininess;
  };

  // Rely on the Action to pass light information...
  // Action can pick a light(lights), can pick and assign 
  // proper shadow map texture, etc.
  struct DirLight {
    vec3 direction;
    vec4 color;
  };

  //#define HW_PFC

  #ifdef HW_PFC
    uniform sampler2DShadow TEXTURE_0; 
  #else
    uniform sampler2D TEXTURE_0; 
  #endif

  uniform Material surface = Material (
    vec4(.8, .4, .4, 1),    // diffuse
    vec4(.15, .15, .15, 1), // ambient
    vec4(.6, .6, .6, 1),    // specular
    50                      // shininess
  ); 

  uniform DirLight light = DirLight (
    vec3(0, 0, 1),       // direction
    vec4(1, 1, 1, 1)     // color
  );

  ///////////////////////////////////////////////////////////////////////////
  // n          - unit normal
  // e          - unit point to camera
  // l          - unit point to light source
  // lc         - light source color
  // suface     - surface properties
  // kd_texture - sampled texture color
  // shadow     - shadow visibility: 0 - full shadow, 1 - no shadow
  ///////////////////////////////////////////////////////////////////////////
  vec3 Shading(vec3 n, vec3 e, vec3 l, vec3 lc, Material surface, vec4 kd_texture, float shadow) {
    vec3 spec = vec3(0);

    float diff_int = max(dot(n, l), 0); 
    if (diff_int > 0) {
      // the half vector
      vec3 h = normalize(l + e);
      float spec_int = max(dot(n, h), 0);
      spec = surface.specular.rgb * pow(spec_int, surface.shininess);
    }

    vec3 diff = shadow * diff_int * surface.diffuse.rgb * kd_texture.rgb;          
    vec3 light = (diff + spec) * lc; 
    return max(light, surface.ambient.rgb);
  }

  void main () {
    // normal, to eye and to light unit vectors in world space
    vec3 n = normalize(IN.wnrm);
    vec3 e = normalize(IN.weye);
    vec3 l = -normalize(light.direction);
    vec3 lc = light.color.rgb;

    const float shadow_bias = 0.001;
    
    #ifdef HW_PFC
      //In order to use sampler2DShadow the following must be called from C++ code
      //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_R_TO_TEXTURE);
      float shadow = texture( TEXTURE_0, vec3(IN.shadow_coord.xy, (IN.shadow_coord.z - shadow_bias)/IN.shadow_coord.w) );
    #else
      float nearest = texture(TEXTURE_0, IN.shadow_coord.xy).r; 
      float shadow = 1.0;
      if (IN.shadow_coord.z - shadow_bias > nearest) {
        shadow = 1.0 - 0.6;
      }
    #endif

    OUT_color.rgb = Shading(n, e, l, lc, surface, vec4(1,1,1,1), shadow);
    OUT_color.a = 1;
  }

pass:
  name     : pass.normal 
  tags     : [onscreen]
  queue    : 110
  cull     : ccw 
  vertex   : *VS
  fragment : *FS 

pass:
  name     : pass.shadowcast
  tags     : [shadow-caster]
  queue    : 100
  cull     : cw
  vertex   : Assets/Shaders/shadowmap_caster.vs
  fragment : Assets/Shaders/shadowmap_caster.fs
