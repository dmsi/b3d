name: directional_light

textures: 
  0: Assets/tango-128.ppm

.VS: &VS |
    #version 330 core

    layout(location = 0) in vec3 IN_position;
    layout(location = 1) in vec3 IN_normal;
    layout(location = 3) in vec2 IN_uv;

    out InOut {
      vec3 wnormal;
      vec3 wto_eye;
      vec2 uv;
    } OUT;

    uniform mat4 SU_PVM_MATRIX;
    uniform mat4 SU_M_MATRIX;
    uniform mat4 SU_V_MATRIX;

    void main() {
      OUT.wnormal = (SU_M_MATRIX * vec4(IN_normal, 0)).xyz;
      vec3 wpos = (SU_M_MATRIX * vec4(IN_position, 1)).xyz;
      OUT.wto_eye = (inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1)).xyz - wpos;
      OUT.uv = vec2(IN_uv.x, 1-IN_uv.y);
      gl_Position = SU_PVM_MATRIX * vec4(IN_position, 1); 
    }

.FS: &FS |
    #version 330 core

    in InOut {
      vec3 wnormal;
      vec3 wto_eye;
      vec2 uv;
    } IN;
    
    out vec4 OUT_color;

    struct Material {
      vec4  diffuse;
      vec4  ambient;
      vec4  specular;
      float shininess;
      bool  has_albedo;
    };

    uniform sampler2D TEXTURE_0; 
    uniform Material  surface;
    uniform vec3      SU_DIRECTIONAL_LIGHT_DIRECTION_0;
    uniform vec4      SU_DIRECTIONAL_LIGHT_COLOR_0;

    ///////////////////////////////////////////////////////////////////////////
    // normal       - unit normal
    // to_eye       - unit point to camera
    // to_light     - unit point to light source
    // light_color  - light source color
    // suface       - surface properties
    // albedo       - sampled albedo 
    // shadow       - shadow visibility: 0 - full shadow, 1 - no shadow
    ///////////////////////////////////////////////////////////////////////////
    vec3 Shading(vec3 normal, vec3 to_eye, vec3 to_light, 
                 vec3 light_color, Material surface, vec4 albedo, float shadow) {
      vec3 spec = vec3(0);

      float diff_int = max(dot(normal, to_light), 0); 
      if (diff_int > 0) {
        vec3 hlf = normalize(to_light + to_eye);
        float spec_int = max(dot(normal, hlf), 0);
        spec = surface.specular.rgb * pow(spec_int, surface.shininess);
      }

      vec3 diff = shadow * diff_int * surface.diffuse.rgb * albedo.rgb;          
      vec3 light = (diff + spec) * light_color; 
      return max(light, surface.ambient.rgb);
    }

    void main () {
      vec4 albedo = vec4(1);
      if (surface.has_albedo) {
        albedo = texture(TEXTURE_0, IN.uv);
      }

      vec3 normal = normalize(IN.wnormal);
      vec3 to_eye = normalize(IN.wto_eye);
      vec3 to_light = -SU_DIRECTIONAL_LIGHT_DIRECTION_0;
      vec3 lc = SU_DIRECTIONAL_LIGHT_COLOR_0.rgb;
      OUT_color.rgb = Shading(normal, to_eye, to_light, lc, surface, albedo, 1);
    }

pass:
  name     : pass0
  queue    : 100
  tags     : [onscreen]
  cull     : ccw 
  vertex   : *VS
  fragment : *FS
