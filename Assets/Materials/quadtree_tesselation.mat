name: quadtree_tesselation

textures:
  0: Assets/HeightMaps/sfo_8x8_hmap.pgm
  1: Assets/HeightMaps/sfo_8x8_nmap.ppm

.VS: &VS |
  #version 400 core

  layout(location = 0) in vec3 In_Position;
  layout(location = 8) in vec4 Ini_Offset_Size;
  layout(location = 9) in vec4 Ini_TintColor;

  uniform mat4 SU_M_MATRIX;
  uniform mat4 SU_V_MATRIX;

  out InOut {
    vec4 tint;
    vec3 wpos;
    vec3 weye;
  } Out;

  void main() {
    Out.tint = Ini_TintColor;
    Out.wpos = In_Position.xyz * Ini_Offset_Size.w + Ini_Offset_Size.xyz;
    Out.weye = (inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1)).xyz;
  }

.TC: &TC |
  #version 400 core

  layout(vertices = 4) out;

  in InOut {
    vec4 tint;
    vec3 wpos;
    vec3 weye;
  } In[];

  out InOut {
    vec4 tint;
    vec3 wpos;
  } Out[];

  uniform float tesselation_min_distance; // highest level of tesselation within
  uniform float tesselation_max_distance; // lowest level of tesselation outside

  #define ID gl_InvocationID

  float lod_edge(vec3 p0, vec3 p1) {
    float d = min(length(In[0].weye.xz - p0.xz),
                  length(In[0].weye.xz - p1.xz));
    d = clamp((d-tesselation_min_distance)/tesselation_max_distance, 0, 1);

    return mix(64, 8, d);
  }
  
  void main() {
    Out[ID].tint = In[ID].tint;
    Out[ID].wpos = In[ID].wpos;
    
    if (ID == 0) {
      // For "Z" vertex order, 0 - top, 1 left, 2 bottom, 3 - right 
      float tess0 = lod_edge(In[0].wpos, In[1].wpos);
      float tess1 = lod_edge(In[0].wpos, In[2].wpos);
      float tess2 = lod_edge(In[2].wpos, In[3].wpos);
      float tess3 = lod_edge(In[3].wpos, In[1].wpos);

      //float tess_inner = 0.25 * (tess0 + tess1 + tess2 + tess3);
      float tess_inner = max(max(tess0, tess1), max(tess2, tess3));

      gl_TessLevelInner[0] = tess_inner;
      gl_TessLevelInner[1] = tess_inner;

      // It is not 100% seamless, but gaps happens rarely and they're tiny
      gl_TessLevelOuter[0] = 64;
      gl_TessLevelOuter[1] = 64;
      gl_TessLevelOuter[2] = 64;
      gl_TessLevelOuter[3] = 64;
    }
  }

.TE: &TE |
  #version 400 core

  layout(quads, equal_spacing, ccw) in;
  
  in InOut {
    vec4 tint;
    vec3 wpos;
  } In[];

  out InOut {
    vec2 uv;
    vec4 tint;
    vec3 wpos;
  } Out;

  uniform mat4      SU_P_MATRIX;
  uniform mat4      SU_V_MATRIX;
  uniform sampler2D TEXTURE_0;         // heightmap
  uniform float     terrain_half_size; // half size of the whole xz plane
  uniform float     max_elevation;     // maximum terrain elevation

  float Sigma(float x) {
    if (x < 0.5) {
      return 0.5 * (2*x)*(2*x)*(2*x);
    }
    return 0.5 * ( (2*x-2)*(2*x-2)*(2*x-2) + 2 );
  }

  void main() {
    // Wpos
    float u = gl_TessCoord.y, v = gl_TessCoord.x;
    vec3 a = mix(In[0].wpos, In[1].wpos, u);
    vec3 b = mix(In[2].wpos, In[3].wpos, u);
    Out.wpos = mix(a, b, v);

    // Uv
    float tu = (Out.wpos.x / terrain_half_size)*0.5 + 0.5;
    float tv = (Out.wpos.z / terrain_half_size)*0.5 + 0.5;
    Out.uv = vec2(tu, tv);

    // Elevation
    Out.wpos.y = Sigma(texture(TEXTURE_0, Out.uv).r) * max_elevation; 

    // Tint - paint LODs in colors
    Out.tint = In[0].tint;

    gl_Position = SU_P_MATRIX * SU_V_MATRIX * vec4(Out.wpos, 1);
  }

.GS: &GS |
  #version 400 core

  layout(triangles) in;
  layout(triangle_strip, max_vertices = 3) out;

  in InOut {
    vec2 uv;
    vec4 tint;
    vec3 wpos;
  } In[3];

  out InOut {
    vec2 uv;
    vec3 wpos;
    vec4 tint;
    vec3 wnormal;
    vec3 tri_distance;
  } Out;

  uniform mat4 SU_M_MATRIX;

  void main() {
    vec3 A = In[2].wpos - In[0].wpos;
    vec3 B = In[1].wpos - In[0].wpos;
    Out.wnormal = mat3(SU_M_MATRIX) * normalize(cross(B, A));

    Out.uv = In[0].uv;
    Out.wpos = In[0].wpos;
    Out.tint = In[0].tint;
    Out.tri_distance = vec3(1, 0, 0);
    gl_Position = gl_in[0].gl_Position; EmitVertex();

    Out.uv = In[1].uv;
    Out.wpos = In[1].wpos;
    Out.tint = In[0].tint;
    Out.tri_distance = vec3(0, 1, 0);
    gl_Position = gl_in[1].gl_Position; EmitVertex();

    Out.uv = In[2].uv;
    Out.wpos = In[2].wpos;
    Out.tint = In[0].tint;
    Out.tri_distance = vec3(0, 0, 1);
    gl_Position = gl_in[2].gl_Position; EmitVertex();

    EndPrimitive();
  }

.FS: &FS | 
  #version 400 core

  in InOut {
    vec2 uv;
    vec3 wpos;
    vec4 tint;
    vec3 wnormal;
    vec3 tri_distance;
  } In;

  out vec4 Out_color;

  const bool draw_lines = true;

  uniform vec3      SU_DIRECTIONAL_LIGHT_DIRECTION_0;
  uniform sampler2D TEXTURE_1; // normalmap

  float amplify(float d, float scale, float offset) {
    d = scale * d + offset;
    d = clamp(d, 0, 1);
    d = 1 - exp2(-2*d*d);
    return d;
  }

  void main() {
    vec4 color = In.tint;
    if (draw_lines) {
      float d = min(min(In.tri_distance.x, In.tri_distance.y), In.tri_distance.z);
      d = amplify(d, 50, -0.5);
      color = d * color; 
    }

    vec3 N = normalize(texture(TEXTURE_1, In.uv).rgb * 2 - 1);
    vec3 L = normalize(-SU_DIRECTIONAL_LIGHT_DIRECTION_0);

    //color = vec4(.7); // testing
    Out_color = color * (max(0, dot(N, L)) * 0.7 + 0.3); 
  }

pass:
  name             : pass.normal
  queue            : 110
  tags             : [onscreen]
  cull             : ccw
  fill             : solid
  vertex           : *VS
  tess_control     : *TC
  tess_evaluation  : *TE
  geometry         : *GS
  fragment         : *FS

