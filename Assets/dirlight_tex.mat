name: DirectionalLight 

textures: 
  0: Assets/noise.ppm

pass:
  name: dirlight.mat/Phong/Pass
  tags: [onscreen]
  queue: 110
  cull: ccw 
  vertex: | 
          #version 330 core

          // Phont-Blinn shading model. All calculations are in world space.

          layout(location = 0) in vec3 vertex_position;
          layout(location = 1) in vec3 vertex_normal;
          layout(location = 2) in vec4 vertex_color;
          layout(location = 3) in vec2 vertex_uv;

          out VertexData {
            vec3 wpos;
            vec3 wnormal;
            vec2 uv;
            vec3 vcol;
            vec3 weye; // vector from vertex to camera
          } OUT;

          uniform mat4 SU_PVM_MATRIX;
          uniform mat4 SU_M_MATRIX;
          uniform mat4 SU_V_MATRIX;
          uniform mat4 SU_P_MATRIX;

          void main() {
            gl_Position = SU_PVM_MATRIX * vec4(vertex_position, 1); 
            OUT.wpos = (SU_M_MATRIX * vec4(vertex_position, 1)).xyz;
            OUT.wnormal = normalize((SU_M_MATRIX * vec4(vertex_normal.xyz, 0)).xyz);
            vec4 campos = inverse(SU_V_MATRIX) * vec4(0, 0, 0, 1);
            OUT.weye = campos.xyz - OUT.wpos; // to camera vector, no need to normalize just yet
            OUT.uv = vertex_uv;
            OUT.vcol = vertex_color.rgb;
          }

  fragment: | 
          #version 330 core

          in VertexData {
            vec3 wpos;
            vec3 wnormal;
            vec2 uv;
            vec3 vcol;
            vec3 weye;
          } IN;

          struct Material {
            vec4 diffuse;
            vec4 ambient;
            vec4 specular;
            float shininess;
          };

          uniform sampler2D TEXTURE_0; 
          uniform vec3 SU_DIRECTIONAL_LIGHT_DIRECTION_0;
          uniform vec4 SU_DIRECTIONAL_LIGHT_COLOR_0;
          uniform Material surface = Material (
            vec4(1,1,1,1),
            vec4(.1,.1,.1,1),
            vec4(.8,.8,.8,1),
            50
          ); 

          // n - unit normal
          // e - unit point to camera
          // l - unit point to light source
          // lc - light source color
          // suface - surface properties
          // kd_texture - sampled texture color
          vec3 Lighting(vec3 n, vec3 e, vec3 l, vec3 lc, Material surface, vec4 kd_texture) {
            vec3 spec = vec3(0);

            float diff_int = max(dot(n, l), 0); 
            if (diff_int > 0) {
              // the half vector
              vec3 h = normalize(l + e);
              float spec_int = max(dot(n, h), 0);
              spec = surface.specular.rgb * pow(spec_int, surface.shininess);
            }

            vec3 diff = diff_int * surface.diffuse.rgb * kd_texture.rgb;          
            vec3 light = (diff + spec) * lc; 
            return max(light, surface.ambient.rgb);
          }

          out vec3 color;
          void main () {
            // normal, to eye and to light unit vectors in world space
            vec3 n = normalize(IN.wnormal);
            vec3 e = normalize(IN.weye);
            vec3 l = -normalize(SU_DIRECTIONAL_LIGHT_DIRECTION_0);

            vec3 light_color = SU_DIRECTIONAL_LIGHT_COLOR_0.rgb;

            vec4 tex = texture(TEXTURE_0, IN.uv);
            color = Lighting(n, e, l, light_color, surface, tex);
          }

