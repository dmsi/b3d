name: deferred_combine

.VS: &VS_combine |
    #version 330 core

    layout(location = 0) in vec3 IN_position;
    layout(location = 3) in vec2 IN_uv;

    out InOut {
      vec2 uv;
    } OUT;

    uniform mat4 SU_M_MATRIX;

    void main() {
      OUT.uv = IN_uv; 
      gl_Position = SU_M_MATRIX * vec4(IN_position, 1); 
    }

.FS: &FS_combine |
    #version 330 core

    in InOut {
      vec2 uv;
    } IN;
    
    out vec4 OUT_color;

    uniform sampler2D TEXTURE_0; 
    uniform sampler2D TEXTURE_1; 
    uniform sampler2D TEXTURE_2; 
    uniform sampler2D TEXTURE_3; 
    uniform vec3      SU_DIRECTIONAL_LIGHT_DIRECTION_0;
    uniform vec4      SU_DIRECTIONAL_LIGHT_COLOR_0;

    void main () {
      vec4 albedo = texture(TEXTURE_0, IN.uv);
      if (albedo.a == 0) {
        OUT_color = albedo; 
        return;
      }

      vec3 normal = texture(TEXTURE_1, IN.uv).xyz * 2 - 1;
      vec4 specular = texture(TEXTURE_2, IN.uv);
      vec3 to_eye = texture(TEXTURE_3, IN.uv).xyz * 2 - 1;
      vec3 to_light = -SU_DIRECTIONAL_LIGHT_DIRECTION_0;
      vec3 lc = SU_DIRECTIONAL_LIGHT_COLOR_0.rgb;
      const float shininess = 100; // can encode this into alpha of 
      const vec3 ambient = vec3(.2);

      vec3 spec = vec3(0);
      float diff_int = max(dot(normal, to_light), 0);
      if (diff_int > 0) {
        vec3 hlf = normalize(to_light + to_eye);
        float spec_int = max(dot(normal, hlf), 0);
        spec = specular.rgb * pow(spec_int, specular.a * 100); 
      }
      vec3 shading = max((albedo.rgb * diff_int + spec) * lc, ambient);

      OUT_color = vec4(shading, 1);
    }

pass:
  name     : pass.combine
  queue    : 999 
  tags     : [onscreen]
  cull     : ccw 
  vertex   : *VS_combine
  fragment : *FS_combine
